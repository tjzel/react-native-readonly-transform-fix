
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsCpp.js
 */

#include <react/renderer/components/AppSpecs/Props.h>
#include <react/renderer/core/PropsParserContext.h>
#include <react/renderer/core/propsConversions.h>

namespace facebook::react {

RNTMyNativeViewProps::RNTMyNativeViewProps(
    const PropsParserContext &context,
    const RNTMyNativeViewProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    opacity(convertRawProp(context, rawProps, "opacity", sourceProps.opacity, {0.0})),
    values(convertRawProp(context, rawProps, "values", sourceProps.values, {})) {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName RNTMyNativeViewProps::getDiffPropsImplementationTarget() const {
  return "RNTMyNativeView";
}

folly::dynamic RNTMyNativeViewProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = RNTMyNativeViewProps();
  const RNTMyNativeViewProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const RNTMyNativeViewProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  if ((opacity != oldProps->opacity) && !(std::isnan(opacity) && std::isnan(oldProps->opacity))) {
    result["opacity"] = opacity;
  }
    
  if (values != oldProps->values) {
    result["values"] = toDynamic(values);
  }
  return result;
}
#endif
RNTReportFullyDrawnViewProps::RNTReportFullyDrawnViewProps(
    const PropsParserContext &context,
    const RNTReportFullyDrawnViewProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps)

     {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName RNTReportFullyDrawnViewProps::getDiffPropsImplementationTarget() const {
  return "RNTReportFullyDrawnView";
}

folly::dynamic RNTReportFullyDrawnViewProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = RNTReportFullyDrawnViewProps();
  const RNTReportFullyDrawnViewProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const RNTReportFullyDrawnViewProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  return result;
}
#endif

} // namespace facebook::react
