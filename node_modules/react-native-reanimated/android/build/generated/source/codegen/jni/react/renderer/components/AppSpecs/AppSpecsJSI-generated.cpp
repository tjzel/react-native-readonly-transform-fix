/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleCpp.js
 */

#include "AppSpecsJSI.h"

namespace facebook::react {

static jsi::Value __hostFunction_NativeCxxModuleExampleCxxSpecJSI_getArray(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCxxModuleExampleCxxSpecJSI *>(&turboModule)->getArray(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asObject(rt).asArray(rt)
  );
}
static jsi::Value __hostFunction_NativeCxxModuleExampleCxxSpecJSI_getBool(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCxxModuleExampleCxxSpecJSI *>(&turboModule)->getBool(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asBool()
  );
}
static jsi::Value __hostFunction_NativeCxxModuleExampleCxxSpecJSI_getConstants(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCxxModuleExampleCxxSpecJSI *>(&turboModule)->getConstants(
    rt
  );
}
static jsi::Value __hostFunction_NativeCxxModuleExampleCxxSpecJSI_getCustomEnum(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCxxModuleExampleCxxSpecJSI *>(&turboModule)->getCustomEnum(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber()
  );
}
static jsi::Value __hostFunction_NativeCxxModuleExampleCxxSpecJSI_getCustomHostObject(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCxxModuleExampleCxxSpecJSI *>(&turboModule)->getCustomHostObject(
    rt
  );
}
static jsi::Value __hostFunction_NativeCxxModuleExampleCxxSpecJSI_consumeCustomHostObject(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCxxModuleExampleCxxSpecJSI *>(&turboModule)->consumeCustomHostObject(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asObject(rt)
  );
}
static jsi::Value __hostFunction_NativeCxxModuleExampleCxxSpecJSI_getBinaryTreeNode(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCxxModuleExampleCxxSpecJSI *>(&turboModule)->getBinaryTreeNode(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asObject(rt)
  );
}
static jsi::Value __hostFunction_NativeCxxModuleExampleCxxSpecJSI_getGraphNode(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCxxModuleExampleCxxSpecJSI *>(&turboModule)->getGraphNode(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asObject(rt)
  );
}
static jsi::Value __hostFunction_NativeCxxModuleExampleCxxSpecJSI_getNumEnum(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCxxModuleExampleCxxSpecJSI *>(&turboModule)->getNumEnum(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber()
  );
}
static jsi::Value __hostFunction_NativeCxxModuleExampleCxxSpecJSI_getStrEnum(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCxxModuleExampleCxxSpecJSI *>(&turboModule)->getStrEnum(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeCxxModuleExampleCxxSpecJSI_getMap(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCxxModuleExampleCxxSpecJSI *>(&turboModule)->getMap(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asObject(rt)
  );
}
static jsi::Value __hostFunction_NativeCxxModuleExampleCxxSpecJSI_getNumber(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCxxModuleExampleCxxSpecJSI *>(&turboModule)->getNumber(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber()
  );
}
static jsi::Value __hostFunction_NativeCxxModuleExampleCxxSpecJSI_getObject(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCxxModuleExampleCxxSpecJSI *>(&turboModule)->getObject(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asObject(rt)
  );
}
static jsi::Value __hostFunction_NativeCxxModuleExampleCxxSpecJSI_getSet(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCxxModuleExampleCxxSpecJSI *>(&turboModule)->getSet(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asObject(rt).asArray(rt)
  );
}
static jsi::Value __hostFunction_NativeCxxModuleExampleCxxSpecJSI_getString(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCxxModuleExampleCxxSpecJSI *>(&turboModule)->getString(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeCxxModuleExampleCxxSpecJSI_getUnion(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCxxModuleExampleCxxSpecJSI *>(&turboModule)->getUnion(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber(),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asString(rt),
    count <= 2 ? throw jsi::JSError(rt, "Expected argument in position 2 to be passed") : args[2].asObject(rt)
  );
}
static jsi::Value __hostFunction_NativeCxxModuleExampleCxxSpecJSI_getValue(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCxxModuleExampleCxxSpecJSI *>(&turboModule)->getValue(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber(),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asString(rt),
    count <= 2 ? throw jsi::JSError(rt, "Expected argument in position 2 to be passed") : args[2].asObject(rt)
  );
}
static jsi::Value __hostFunction_NativeCxxModuleExampleCxxSpecJSI_getValueWithCallback(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  static_cast<NativeCxxModuleExampleCxxSpecJSI *>(&turboModule)->getValueWithCallback(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asObject(rt).asFunction(rt)
  );
  return jsi::Value::undefined();
}
static jsi::Value __hostFunction_NativeCxxModuleExampleCxxSpecJSI_setValueCallbackWithSubscription(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCxxModuleExampleCxxSpecJSI *>(&turboModule)->setValueCallbackWithSubscription(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asObject(rt).asFunction(rt)
  );
}
static jsi::Value __hostFunction_NativeCxxModuleExampleCxxSpecJSI_getValueWithPromise(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCxxModuleExampleCxxSpecJSI *>(&turboModule)->getValueWithPromise(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asBool()
  );
}
static jsi::Value __hostFunction_NativeCxxModuleExampleCxxSpecJSI_getWithWithOptionalArgs(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  auto result = static_cast<NativeCxxModuleExampleCxxSpecJSI *>(&turboModule)->getWithWithOptionalArgs(
    rt,
    count <= 0 || args[0].isUndefined() ? std::nullopt : std::make_optional(args[0].asBool())
  );
  return result ? jsi::Value(std::move(*result)) : jsi::Value::null();
}
static jsi::Value __hostFunction_NativeCxxModuleExampleCxxSpecJSI_voidFunc(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  static_cast<NativeCxxModuleExampleCxxSpecJSI *>(&turboModule)->voidFunc(
    rt
  );
  return jsi::Value::undefined();
}
static jsi::Value __hostFunction_NativeCxxModuleExampleCxxSpecJSI_voidPromise(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCxxModuleExampleCxxSpecJSI *>(&turboModule)->voidPromise(
    rt
  );
}
static jsi::Value __hostFunction_NativeCxxModuleExampleCxxSpecJSI_setMenu(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  static_cast<NativeCxxModuleExampleCxxSpecJSI *>(&turboModule)->setMenu(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asObject(rt)
  );
  return jsi::Value::undefined();
}
static jsi::Value __hostFunction_NativeCxxModuleExampleCxxSpecJSI_emitCustomDeviceEvent(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  static_cast<NativeCxxModuleExampleCxxSpecJSI *>(&turboModule)->emitCustomDeviceEvent(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
  return jsi::Value::undefined();
}
static jsi::Value __hostFunction_NativeCxxModuleExampleCxxSpecJSI_voidFuncThrows(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  static_cast<NativeCxxModuleExampleCxxSpecJSI *>(&turboModule)->voidFuncThrows(
    rt
  );
  return jsi::Value::undefined();
}
static jsi::Value __hostFunction_NativeCxxModuleExampleCxxSpecJSI_getObjectThrows(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCxxModuleExampleCxxSpecJSI *>(&turboModule)->getObjectThrows(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asObject(rt)
  );
}
static jsi::Value __hostFunction_NativeCxxModuleExampleCxxSpecJSI_promiseThrows(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCxxModuleExampleCxxSpecJSI *>(&turboModule)->promiseThrows(
    rt
  );
}
static jsi::Value __hostFunction_NativeCxxModuleExampleCxxSpecJSI_voidFuncAssert(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  static_cast<NativeCxxModuleExampleCxxSpecJSI *>(&turboModule)->voidFuncAssert(
    rt
  );
  return jsi::Value::undefined();
}
static jsi::Value __hostFunction_NativeCxxModuleExampleCxxSpecJSI_getObjectAssert(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCxxModuleExampleCxxSpecJSI *>(&turboModule)->getObjectAssert(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asObject(rt)
  );
}
static jsi::Value __hostFunction_NativeCxxModuleExampleCxxSpecJSI_promiseAssert(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCxxModuleExampleCxxSpecJSI *>(&turboModule)->promiseAssert(
    rt
  );
}

NativeCxxModuleExampleCxxSpecJSI::NativeCxxModuleExampleCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker)
  : TurboModule("NativeCxxModuleExampleCxx", jsInvoker) {
  methodMap_["getArray"] = MethodMetadata {1, __hostFunction_NativeCxxModuleExampleCxxSpecJSI_getArray};
  methodMap_["getBool"] = MethodMetadata {1, __hostFunction_NativeCxxModuleExampleCxxSpecJSI_getBool};
  methodMap_["getConstants"] = MethodMetadata {0, __hostFunction_NativeCxxModuleExampleCxxSpecJSI_getConstants};
  methodMap_["getCustomEnum"] = MethodMetadata {1, __hostFunction_NativeCxxModuleExampleCxxSpecJSI_getCustomEnum};
  methodMap_["getCustomHostObject"] = MethodMetadata {0, __hostFunction_NativeCxxModuleExampleCxxSpecJSI_getCustomHostObject};
  methodMap_["consumeCustomHostObject"] = MethodMetadata {1, __hostFunction_NativeCxxModuleExampleCxxSpecJSI_consumeCustomHostObject};
  methodMap_["getBinaryTreeNode"] = MethodMetadata {1, __hostFunction_NativeCxxModuleExampleCxxSpecJSI_getBinaryTreeNode};
  methodMap_["getGraphNode"] = MethodMetadata {1, __hostFunction_NativeCxxModuleExampleCxxSpecJSI_getGraphNode};
  methodMap_["getNumEnum"] = MethodMetadata {1, __hostFunction_NativeCxxModuleExampleCxxSpecJSI_getNumEnum};
  methodMap_["getStrEnum"] = MethodMetadata {1, __hostFunction_NativeCxxModuleExampleCxxSpecJSI_getStrEnum};
  methodMap_["getMap"] = MethodMetadata {1, __hostFunction_NativeCxxModuleExampleCxxSpecJSI_getMap};
  methodMap_["getNumber"] = MethodMetadata {1, __hostFunction_NativeCxxModuleExampleCxxSpecJSI_getNumber};
  methodMap_["getObject"] = MethodMetadata {1, __hostFunction_NativeCxxModuleExampleCxxSpecJSI_getObject};
  methodMap_["getSet"] = MethodMetadata {1, __hostFunction_NativeCxxModuleExampleCxxSpecJSI_getSet};
  methodMap_["getString"] = MethodMetadata {1, __hostFunction_NativeCxxModuleExampleCxxSpecJSI_getString};
  methodMap_["getUnion"] = MethodMetadata {3, __hostFunction_NativeCxxModuleExampleCxxSpecJSI_getUnion};
  methodMap_["getValue"] = MethodMetadata {3, __hostFunction_NativeCxxModuleExampleCxxSpecJSI_getValue};
  methodMap_["getValueWithCallback"] = MethodMetadata {1, __hostFunction_NativeCxxModuleExampleCxxSpecJSI_getValueWithCallback};
  methodMap_["setValueCallbackWithSubscription"] = MethodMetadata {1, __hostFunction_NativeCxxModuleExampleCxxSpecJSI_setValueCallbackWithSubscription};
  methodMap_["getValueWithPromise"] = MethodMetadata {1, __hostFunction_NativeCxxModuleExampleCxxSpecJSI_getValueWithPromise};
  methodMap_["getWithWithOptionalArgs"] = MethodMetadata {1, __hostFunction_NativeCxxModuleExampleCxxSpecJSI_getWithWithOptionalArgs};
  methodMap_["voidFunc"] = MethodMetadata {0, __hostFunction_NativeCxxModuleExampleCxxSpecJSI_voidFunc};
  methodMap_["voidPromise"] = MethodMetadata {0, __hostFunction_NativeCxxModuleExampleCxxSpecJSI_voidPromise};
  methodMap_["setMenu"] = MethodMetadata {1, __hostFunction_NativeCxxModuleExampleCxxSpecJSI_setMenu};
  methodMap_["emitCustomDeviceEvent"] = MethodMetadata {1, __hostFunction_NativeCxxModuleExampleCxxSpecJSI_emitCustomDeviceEvent};
  methodMap_["voidFuncThrows"] = MethodMetadata {0, __hostFunction_NativeCxxModuleExampleCxxSpecJSI_voidFuncThrows};
  methodMap_["getObjectThrows"] = MethodMetadata {1, __hostFunction_NativeCxxModuleExampleCxxSpecJSI_getObjectThrows};
  methodMap_["promiseThrows"] = MethodMetadata {0, __hostFunction_NativeCxxModuleExampleCxxSpecJSI_promiseThrows};
  methodMap_["voidFuncAssert"] = MethodMetadata {0, __hostFunction_NativeCxxModuleExampleCxxSpecJSI_voidFuncAssert};
  methodMap_["getObjectAssert"] = MethodMetadata {1, __hostFunction_NativeCxxModuleExampleCxxSpecJSI_getObjectAssert};
  methodMap_["promiseAssert"] = MethodMetadata {0, __hostFunction_NativeCxxModuleExampleCxxSpecJSI_promiseAssert};
}
static jsi::Value __hostFunction_NativeScreenshotManagerCxxSpecJSI_getConstants(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeScreenshotManagerCxxSpecJSI *>(&turboModule)->getConstants(
    rt
  );
}
static jsi::Value __hostFunction_NativeScreenshotManagerCxxSpecJSI_takeScreenshot(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeScreenshotManagerCxxSpecJSI *>(&turboModule)->takeScreenshot(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asObject(rt)
  );
}

NativeScreenshotManagerCxxSpecJSI::NativeScreenshotManagerCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker)
  : TurboModule("ScreenshotManager", jsInvoker) {
  methodMap_["getConstants"] = MethodMetadata {0, __hostFunction_NativeScreenshotManagerCxxSpecJSI_getConstants};
  methodMap_["takeScreenshot"] = MethodMetadata {2, __hostFunction_NativeScreenshotManagerCxxSpecJSI_takeScreenshot};
}


} // namespace facebook::react
